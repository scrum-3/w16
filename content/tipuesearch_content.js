var tipuesearch = {"pages": [{'title': 'About', 'text': 'Replit:  https://w16.scrum3.repl.co (目前無法在編輯器中將此連結設為 anchor) \n Github 倉儲:  https://github.com/scrum-3/w16 \n Github Pages:  https://scrum-3.github.io/w16 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Note', 'text': '\n 登入 github.com \n 連結到  https://github.com/mdecycu/cmsimde_site , 以此倉儲作為 Template 建立一個新倉儲 (只有 cmsimde 目錄, 並不將其作為子目錄, 好處是可以自行更動 cmsimde 內容, 壞處為要自行更新 cmsimde). \n 連結到  https://github.com/mdecycu/cmsite , 以此倉儲作為 Template 建立一個新倉儲 (以 cmsimde 作為子模組, 好處為可利用 cd cmsimde, git pull origin master 完成與 cmsimde 官網內容同步, 壞處為不可任意修改 cmsimde 目錄中的資料). \n 回到 Replit, 建立新的 Repl 時, 利用 Import from Github 建立新專案 (w16), 必須確定從 Replit 進入 Github 維護倉儲內容的權限許可. (若無授權則無法 Import from Github) \n 開啟 Repllit 專案中的隱藏檔案檢視, 然後查看 .replit 是否以 main.py 作為 entry point, 且 main.py 內容如下: \n 並且進入 Shell 頁面 (等同 Windows 的 cmd 命令列視窗) 利用 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝執行 cmsimde 動態網站所需要的 Python 模組, flask 與 flask_cors 為網際框架, bs4 與 lxml 為頁面分頁所需模組, pelican 與 markdown 則用於建立網誌, gevent 則用於啟動 main.py. \n 按下 Run 執行 main.py, 就可以看到動態網站已經啟動. \n 若更新動態網站內容後, 用 Generate_pages 轉為靜態, 必須在 Git Tools 中執行 git add . 與 git commit -m, 最後才進入 Shell 以 git push 將改版內容推向對應的 Github 倉儲. \n \n', 'tags': '', 'url': 'Note.html'}, {'title': 'cmsimde', 'text': '改為 bootstrap based \n https://bootstrap-flask.readthedocs.io/en/stable/ \n https://pythonhosted.org/Flask-Bootstrap/ \n https://hackmd.io/@yitsewu/rk3Ne_D_E?print-pdf \n https://ithelp.ithome.com.tw/articles/10222623 \n 建立網頁 ', 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Brython', 'text': '完成 web based 提交 \n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'Brython.html'}]};